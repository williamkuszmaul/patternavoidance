This software is released under the MIT License. See file LICENSE.
Author: William Kuszmaul
Contact: william.kuszmaul@gmail.com
The algorithms and engineering techniques for this software is discussed in the paper.pdf.
Citation information bibtex entry:
@misc{kuszmaul15,
  title = {Fast Algorithms for Finding Pattern Avoiders and Counting Pattern Occurrences in Permutations},
  author = {William Kuszmaul},
  year = {2015},
  howpublished = {\url{github.com/williamkuszmaul/patternavoidance}}
}


                                  Summary
                                 
This software package provides highly optimized implementations of the
asymptotically fastest known algorithms for (a) building $S_1(\Pi),
S_2(\Pi), \ldots, S_n(\Pi)$ where $S_i(\Pi)$ is the number of
permutations in $S_i$ avoiding the permutation patterns in the set
$\Pi$; (b) counting $|S_1(\Pi)|, |S_2(\Pi)|, \ldots, |S_n(\Pi)|$; (c)
counting for each permutation in $S_n$ how many copies of patterns in
$\Pi$ it contains; (d) counting permutations in $S_n$ according the
the number of copies of patterns of $\Pi$ they contain. For in-depth
discussion of the algorithms, see paper.pdf or
http://arxiv.org/abs/1509.08216.

                                  Organization

The project is split in six directories:
(1) permutationalgs: This contains implementations of the algorithms.
(2) examples: This contains example files using the
algorithms. Importantly, this includes a command-line tool for running
experiments on a file containing a list of sets of patterns.
(3) datacollection: The main file in this is masstest.cpp, which
computes $|S_n(\Pi)|$ for all $5 \le n \le 16$ and $\Pi \subseteq S_4$
(up to trivial Wilf-Equivalence), and then analyzes the resulting
number sequences to find OEIS matches.
(4) data: Contains data collected by masstest.cpp in
datacollection. Due to the size of the data, some of it is compressed.
Also contains discussion of conjectural OEIS formulas.
(5) hashtables: Contains basic hash table and hash map implementations.
(6) codeinprogress: Contains code in progress.

Additionally, the main directory contains:
(1) paper.pdf: Contains in-depth discussion of the algorithms implemented
here. Also, introduces the notation we use in our comments. When
discussing permutations, we use the same notation as in the paper,
indexing both position and value at 1 in the comments; the code,
however, indexes at zero.

                                  How to compile (via a terminal)

Note: These instructions are for Linux and Mac users. I have not run
the code on other OS's. (Moreover, I have only tested the code
extensively on Fedora 22.) If someone knows how to compile on other
systems, I would be happy to include that as well.

To compile all the programs, type "make" in the main directory. To
compile a program in one of the directories, go to the directory and
type "make <name-of-program-without-added-.h-or-.cpp>".


                                   How to run in parallel

This software package is implemented using the Cilk multithreading
libraries in order to achieve parallelism. By default, however,
multithreading is disabled. This is so that systems without Cilk can
run the code without any trouble. (To see the hack I'm using to
disable Cilk, see permutationalgs/permutilities.h.)

To reenable multithreading, go to the file make.include, and follow
the instructions for replacing the CXXFLAGS. In order to run with
multithreading, you will need Cilk installed. In general, my
understanding is that this means you will need GCC version at least
5.0 and you will need to make sure libcilkrts.so is installed (which
may already be installed by default on some systems). On Fedora 22,
which I use, GCC 5.0 is standard and libcilkrts.so can be installed
using the command "sudo yum install libcilkrts".

                                  Settings

To change maximum-possible-permutation-size settings, see
permutationalgs/perm.h. The default is 16.

To change settings for which pattern-avoidance algorithm to use, see
permutationalgs/countavoiders.cpp. The default is the algorithm
presented in paper.pdf.

To change settings for which pattern-counting algorithm to use, see
permutationalgs/countpatterns.cpp. The default is the algorithm
presented in paper.pdf.


                                  Description of Files

----------------------------------- permutationalgs/

perm.cpp/.h and permutilities.cpp/.h: We represent permutations in
unsigned integers, using a fixed amount of space per letter. For
efficiency, we cap the size of a permutation at 16. However, changing
a macro in perm.h allows for this cap to be raised to 25 or 31. These
files contain basic functions for using our permutation
representation. (Technical note: Additionally, permutilities.h
contains a hack which allows systems not supporting Cilk to compile
the code as long as the macro _NO_CILK is defined in make.include.)

countavoiders.cpp/.h: Implements O(|S_{N-1}(Pi)|k) algorithm for
computing |S_n(Pi)| for each n in [1..N] and some set of patterns
(which need not be the same size) Pi, the largest being of size k. Can
also be used to build each S_n(Pi) instead of just counting the
sizes. Could easily be modified to build S \cap S_n(Pi) for a downset
of permutations S. Also implements a brute-force algorithm and an
algorithm based on PermLab for the same task (which can be swapped to
using macros in countavoiders.cpp); for these cases if
SINGLEPATTERNOPT is false, then we require that Pi comprise patterns
of only one size. Provides functions buildavoidersfrompatternlist,
countavoidersfrompatternlist, countavoidersfromfile, and
countavoidersfromfile_parallel which can be used by third-party
programs.

countpatterns.cpp/.h: Implements an O(n!k) algorithm for counting the
number of Pi-patterns appearing in each permutation in S_n for n in
[1..N]. Here, Pi is a set of patterns, the longest being length
k. Could easily be modified to build S \cap S_n(Pi) for a downset of
permutations S. Note that it cannot handle a permutation having more
than 63504 patterns, because we currently store the number of patterns
in a short. Could easily be changed, at cost of constant-factor of
space efficiency. However, this is fine at least for n \le 16, because
there are only 63504 possible subsequences, including the empty
subsequences and subsequences of size 1. Also implements a brute-force
algorithm, and a hybrid algorithm, which both require patterns to be
of uniform size; to use these instead of the faster algorithm, change
the macros in countpatterns.cpp.

----------------------------------- examples/

example.cpp: Example use of countavoiders.h and countpatterns.h
modules. And a bit of use of perm.h module.

runtest.cpp: Command-line driven tool to run computations on a list of
pattern sets in a file. To count |S_1(Pi)|,...|S_n(Pi)| for each Pi in
the file input-file, run "./runtests av <input-file-name> <output file
name> <n> <1-for-verbose,-0-for-not-verbose>". Note that the input
file must contain on each row a list of space-separated permutations
(see file runexampletests-in for an example). To count the number of
permutations of each size up to n containing each number of patterns
in each pattern set in a file, run "./runtests cnt <input-file-name>
<n> <1-for-verbose,-0-for-not-verbose>".

------------------------------------ datacollection/

masstest.cpp: For each pattern set S of S_4 satisfying |S| > 4 (up to
trivial Wilf equivalence), computes number of permutations of each
size (up to size 16) avoiding the pattern set. Then looks up which of
the resulting sequences can be found in OEIS. Writes all of this to an
output file. The Cilk package is used to parallelize the
pattern-avoidance computations. Has option of doing OEIS analysis on
pre-built data files, or of building data files from scratch and then
doing OEIS analysis. By default, data files are built from scratch.
NOTE: Before running masstest.cpp, make sure to setup the files
"stripped" and "names".

stripped: NOT INCLUDED. This file needs to be downloaded at
http://oeis.org/wiki/Welcome#Compressed_Versions, and decompressed to
get a list of OEIS sequences, which are interpreted by
oeislocal.cpp/.h.

names: NOT INCLUDED. This file needs to be downloaded at
http://oeis.org/wiki/Welcome#Compressed_Versions, and decompressed to
get a list of OEIS sequence names, which are interpreted by
oeislocal.cpp/.h.

buildpatternsets.cpp/.h: Writes to a file either (a) all pattern sets
with patterns of size k up to trivial Wilf-equivalence, or (b) all
pattern sets of size j with patterns of size k up to trivial
Wilf-equivalence.

oeislocal.cpp/.h: Implements an OEIS object which on initialization
builds data structures for doing OEIS look-ups using file
stripped. Comes with user interface for looking up sequences in OEIS
(using only local copy of OEIS).

tabledrawer.cpp: A simple program used to generate LaTeX-ed
performance tables in the paper.


------------------------------------ data/

testallfours-sequences: Contains S_1(Pi), ..., S_16(Pi) for all Pi
\subseteq S_4 (up to trivial Wilf-equivalence).

masstest_output_for_sets_of_all_sizes: Contains output of masstest.cpp
(run for sets of length-4 patterns of sizes 5 to 24).

masstest_output_for_sets_of_size_greater_than_4: Contains output of
masstest.cpp (run for sets of length-4 patterns of all sizes).

all_nonpolynomial_OEIS_matches: Lists OEIS matches for all sets of
patterns from S_4, except those that are detected to be polynomials of
degree <= 3.

all_nonpolynomial_OEIS_matches_brief: A summary of all_nonpolynomial_OEIS_matches.

OEIS_conjectural_formulas: The OEIS matches conjectured in the paper
which (a) cannot be resolved using insertion encodings, and (b) do not
appear to already be known.

OEIS_conjectural_formulas_brief: A brief version of OEIS_conjectural_formulas.

------------------------------------ hashtables/

hashdb.cpp/.h: A simple linear-probing hash table storing perm_t's
(defined in permutationalgs/perm.h). Runs several times faster than
using unordered_set.

hashmap.cpp/.h: A simple linear-probing hash table for storing
(perm_t, <payload>) pairs (with perm_t defined in
permalgs/perm.h). Often runs faster than C++ unordered map. Payload
must be fixed size. No special destructor is called on payload.



                          Version Descriptions

Version 1.0: First version of code. All experiments in paper.pdf
having to do with generate-and-check, as well as PermLab's algorithm
were conducted using this version.

Version 2.0: Second version of code. At this point all experiments in
paper.pdf having to do with our dynamic algorithms are conducted using
this version (in serial using compiler settings -D_Cilk_spawn=
-D_Cilk_sync=). Introduces memory-efficient implementations of dynamic
algorithms. Uses Cilk to parallelize algorithms.

Version 2.1: Fixed minor bugs in code and paper.

Version 3.0: Third version of code. Pattern-avoidance algorithms sped
up by a linear factor. As a result, paper.pdf's experiments for
shpattern-avoidance for dynamic algorithm were rerun (in serial using
compiler settings -D_Cilk_spawn= -D_Cilk_sync=). Paper.pdf has
received a round of edits and has been updated to discuss the improved
pattern-avoidance algorithm. Also, fixed a latent bug in
buildinput.cpp.

Version 4.0: The files have been reorganized and renamed to be more
user friendly. Additionally, the default compilation setting is now in
serial and should work even on machines which don't have the Cilk or
Boost libraries installed. (See README for how to enable parallelism.)
The paper has been updated with expository edits. And some additional
error checking has been added to the code.
